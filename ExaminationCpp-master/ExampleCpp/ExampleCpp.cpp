#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <random>
#include <ctime>
#include <sstream>
#include <iomanip>

using namespace std;

// Hàm băm mật khẩu tự tạo
string customHash(const string& password) {
    unsigned long long hash = 0;
    const unsigned long long prime = 31;
    const unsigned long long mod = 1e9 + 9;

    for (char c : password) {
        hash = (hash * prime + static_cast<unsigned long long>(c)) % mod;
        hash = (hash ^ (hash << 13)) % mod;
        hash = (hash ^ (hash >> 7)) % mod;
        hash = (hash ^ (hash << 17)) % mod;
    }

    // Chuyển đổi hash thành chuỗi hex
    stringstream ss;
    ss << hex << setw(16) << setfill('0') << hash;
    return ss.str();
}

// Sinh mật khẩu ngẫu nhiên
string generateRandomPassword() {
    const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(0, chars.size() - 1);
    string password;
    for (int i = 0; i < 8; i++) {
        password += chars[dis(gen)];
    }
    return password;
}

// Sinh OTP ngẫu nhiên
string generateOTP() {
    random_device rd;
    mt19937 gen(rd());
    uniform_int_distribution<> dis(100000, 999999);
    return to_string(dis(gen));
}

// Cấu trúc thông tin người dùng
struct User {
    string username;
    string password; // Lưu dưới dạng hex string của hash
    string fullName;
    bool isAdmin;
    double balance; // Số dư ví
    bool isAutoGeneratedPassword; // Đánh dấu mật khẩu tự động
};

// Cấu trúc giao dịch
struct Transaction {
    string fromUser;
    string toUser;
    double amount;
    string timestamp;
};

// Lớp quản lý hệ thống
class System {
private:
    vector<User> users;
    vector<Transaction> transactions;
    const string userFile = "users.txt";
    const string backupFile = "users_backup.txt";
    const string transactionFile = "transactions.txt";

    // Lưu dữ liệu người dùng vào tệp
    void saveUsersToFile() {
        ofstream outFile(userFile);
        for (const auto& user : users) {
            outFile << user.username << " " << user.password << " " << user.fullName << " "
                << user.isAdmin << " " << user.balance << " " << user.isAutoGeneratedPassword << endl;
        }
        outFile.close();
        backupUsers();
    }

    // Sao lưu dữ liệu
    void backupUsers() {
        ifstream inFile(userFile);
        ofstream outFile(backupFile);
        outFile << inFile.rdbuf();
        inFile.close();
        outFile.close();
    }

    // Khôi phục dữ liệu từ tệp sao lưu
    void restoreUsers() {
        ifstream inFile(backupFile);
        ofstream outFile(userFile);
        outFile << inFile.rdbuf();
        inFile.close();
        outFile.close();
        loadUsersFromFile();
    }

    // Tải dữ liệu người dùng từ tệp
    void loadUsersFromFile() {
        users.clear();
        ifstream inFile(userFile);
        string username, password, fullName;
        bool isAdmin, isAutoGeneratedPassword;
        double balance;
        while (inFile >> username >> password >> fullName >> isAdmin >> balance >> isAutoGeneratedPassword) {
            users.push_back({ username, password, fullName, isAdmin, balance, isAutoGeneratedPassword });
        }
        inFile.close();
    }

    // Ghi giao dịch vào tệp
    void saveTransaction(const Transaction& t) {
        ofstream outFile(transactionFile, ios::app);
        outFile << t.fromUser << " " << t.toUser << " " << t.amount << " " << t.timestamp << endl;
        outFile.close();
    }

public:
    System() {
        loadUsersFromFile();
    }

    // Đăng ký tài khoản
    bool registerUser(const string& username, string password, const string& fullName, bool isAdmin, bool isAuto = false) {
        for (const auto& user : users) {
            if (user.username == username) {
                cout << "Ten dang nhap da ton tai!" << endl;
                return false;
            }
        }
        if (password.empty()) {
            password = generateRandomPassword();
            isAuto = true;
            cout << "Mật khẩu tự động: " << password << endl;
        }
        User newUser = { username, customHash(password), fullName, isAdmin, 0.0, isAuto };
        users.push_back(newUser);
        saveUsersToFile();
        cout << "Đăng ký thành công!" << endl;
        return true;
    }

    // Đăng nhập
    User* login(const string& username, const string& password) {
        for (auto& user : users) {
            if (user.username == username && user.password == customHash(password)) {
                if (user.isAutoGeneratedPassword) {
                    cout << "Mật khẩu tự động. Vui lòng đổi mật khẩu ngay!" << endl;
                    changePassword(&user);
                }
                return &user;
            }
        }
        cout << "Tên đăng nhập hoặc mật khẩu không đúng!" << endl;
        return nullptr;
    }

    // Thay đổi mật khẩu
    void changePassword(User* user) {
        string newPassword;
        cout << "Nhập mật khẩu mới: ";
        cin >> newPassword;
        user->password = customHash(newPassword);
        user->isAutoGeneratedPassword = false;
        saveUsersToFile();
        cout << "Đổi mật khẩu thành công!" << endl;
    }

    // Cập nhật thông tin cá nhân
    void updateUserInfo(User* user, const string& fullName) {
        string otp = generateOTP();
        cout << "OTP xác thực: " << otp << endl;
        string inputOtp;
        cout << "Nhập OTP: ";
        cin >> inputOtp;
        if (inputOtp == otp) {
            user->fullName = fullName;
            saveUsersToFile();
            cout << "Cập nhật thông tin thành công!" << endl;
        }
        else {
            cout << "OTP không hợp lệ!" << endl;
        }
    }

    // Chuyển điểm giữa các ví
    bool transferPoints(User* fromUser, const string& toUsername, double amount) {
        if (amount <= 0) {
            cout << "Số điểm không hợp lệ!" << endl;
            return false;
        }
        User* toUser = nullptr;
        for (auto& user : users) {
            if (user.username == toUsername) {
                toUser = &user;
                break;
            }
        }
        if (!toUser) {
            cout << "Người nhận không tồn tại!" << endl;
            return false;
        }

        string otp = generateOTP();
        cout << "OTP xác thực giao dịch: " << otp << endl;
        string inputOtp;
        cout << "Nhập OTP: ";
        cin >> inputOtp;
        if (inputOtp != otp) {
            cout << "OTP không hợp lệ!" << endl;
            return false;
        }

        if (fromUser->balance >= amount) {
            fromUser->balance -= amount;
            toUser->balance += amount;
            saveUsersToFile();
            Transaction t = { fromUser->username, toUsername, amount, to_string(time(nullptr)) };
            transactions.push_back(t);
            saveTransaction(t);
            cout << "Chuyển điểm thành công!" << endl;
            return true;
        }
        else {
            cout << "Số dư không đủ!" << endl;
            return false;
        }
    }

    //Admin nạp tiền cho tài khoản khác
    void adminDepositMoney(User* admin, const string& targetUsername, double amount) {
        // Kiểm tra quyền admin
        if (!admin->isAdmin) {
            cout << "Chi admin moi co quyen nap tien cho nguoi dung khac!\n";
            return;
        }

        // Kiểm tra số tiền hợp lệ
        if (amount <= 0) {
            cout << "So tien nap khong hop le!\n";
            return;
        }

        // Tìm người dùng đích
        User* targetUser = nullptr;
        for (auto& user : users) {
            if (user.username == targetUsername) {
                targetUser = &user;
                break;
            }
        }

        if (!targetUser) {
            cout << "Nguoi dung khong ton tai!\n";
            return;
        }

        // Cập nhật số dư
        targetUser->balance += amount;
        saveUsersToFile();
        cout << "Nap tien thanh cong cho " << targetUsername << "! So du moi: " << targetUser->balance << "\n";
    }

    // Xem danh sách người dùng (dành cho quản lý)
    void listUsers() {
        for (const auto& user : users) {
            cout << "Tên đăng nhập: " << user.username << ", Họ tên: " << user.fullName
                << ", Quản lý: " << (user.isAdmin ? "Có" : "Không") << ", Số dư: " << user.balance << endl;
        }
    }

    // Cập nhật thông tin thay cho người dùng (dành cho quản lý)
    void adminUpdateUserInfo(const string& username, const string& fullName) {
        User* targetUser = nullptr;
        for (auto& user : users) {
            if (user.username == username) {
                targetUser = &user;
                break;
            }
        }
        if (targetUser) {
            updateUserInfo(targetUser, fullName);
        }
        else {
            cout << "Người dùng không tồn tại!" << endl;
        }
    }
};

// Hàm chính
int main() {
    System sys;
    int choice;
    User* currentUser = nullptr;
    //currentUser->balance = 1000.0;

    while (true) {
        if (!currentUser) {
            cout << "\n1. Đăng nhập\n2. Đăng ký\n3. Thoát\nChọn: ";
            cin >> choice;
            if (choice == 3) break;

            if (choice == 1) {
                string username, password;
                cout << "Tên đăng nhập: ";
                cin >> username;
                cout << "Mật khẩu: ";
                cin >> password;
                currentUser = sys.login(username, password);
            }
            else if (choice == 2) {
                string username, password, fullName;
                bool isAdmin;
                cout << "Tên đăng nhập: ";
                cin >> username;
                cout << "Mật khẩu (bỏ trống để tự động): ";
                cin.ignore();
                getline(cin, password);
                cout << "Họ tên: ";
                getline(cin, fullName);
                cout << "Quản lý (1: Có, 0: Không): ";
                cin >> isAdmin;
                sys.registerUser(username, password, fullName, isAdmin);
            }
        }
        else {
            cout << "\n1. Cập nhật thông tin\n2. Đổi mật khẩu\n3. Chuyển điểm\n";
            if (currentUser->isAdmin) {
                cout << "4. Xem danh sách người dùng\n5. Cập nhật thông tin người dùng\n6. Tạo tài khoản mới\n7. Nap tien tai khoan\n";
            }
            cout << "8. Đăng xuất\nChọn: ";
            cin >> choice;

            if (choice == 1) {
                string fullName;
                cout << "Nhập họ tên mới: ";
                cin.ignore();
                getline(cin, fullName);
                sys.updateUserInfo(currentUser, fullName);
            }
            else if (choice == 2) {
                sys.changePassword(currentUser);
            }
            else if (choice == 3) {
                string toUsername;
                double amount;
                cout << "Tên người nhận: ";
                cin >> toUsername;
                cout << "Số điểm: ";
                cin >> amount;
                sys.transferPoints(currentUser, toUsername, amount);
            }
            else if (choice == 4 && currentUser->isAdmin) {
                sys.listUsers();
            }
            else if (choice == 5 && currentUser->isAdmin) {
                string username, fullName;
                cout << "Tên đăng nhập cần cập nhật: ";
                cin >> username;
                cout << "Họ tên mới: ";
                cin.ignore();
                getline(cin, fullName);
                sys.adminUpdateUserInfo(username, fullName);
            }
            else if (choice == 6 && currentUser->isAdmin) {
                string username, fullName;
                bool isAdmin;
                cout << "Tên đăng nhập: ";
                cin >> username;
                cout << "Họ tên: ";
                cin.ignore();
                getline(cin, fullName);
                cout << "Quản lý (1: Có, 0: Không): ";
                cin >> isAdmin;
                sys.registerUser(username, "", fullName, isAdmin, true);
            }
            else if (choice == 7) {
                string targetUsername;
                double amount;
                cout << "Nhap ten đang nhap nguoi nhan: ";
                cin >> targetUsername;
                cout << "Nhập số tiền: ";
                cin >> amount;
                sys.adminDepositMoney(currentUser, targetUsername, amount);
            } else if (choice == 8) {
                currentUser = nullptr;
                cout << "Đăng xuất thành công!" << endl;
            }
        }
    }
    return 0;
}